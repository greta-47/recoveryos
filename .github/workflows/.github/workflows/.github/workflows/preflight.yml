name: RecoveryOS Preflight

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  preflight:
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Security & Structure Check ----------
      - name: Verify repo integrity and safety
        run: |
          set -e
          # Required files
          test -f Dockerfile || (echo "‚ùå Missing Dockerfile at repo root" && exit 1)
          test -f requirements.txt || (echo "‚ùå Missing requirements.txt" && exit 1)
          test -f api/main.py || (echo "‚ùå Missing api/main.py" && exit 1)
          test -f api/__init__.py || (echo "‚ùå Missing api/__init__.py" && exit 1)
          
          # Block accidental secrets
          if git grep -E 'BEGIN (RSA|PRIVATE) KEY|aws_secret|password=|token=|jwt_secret|client_secret' -- . ; then
            echo "‚ùå Sensitive data detected in repo. Aborting."
            exit 1
          fi

          # Warn if .env exists
          if [ -f .env ]; then
            echo "‚ö†Ô∏è .env file found ‚Äî ensure it's not committed"
          fi

          echo "‚úÖ Repo structure and safety check passed."

      # ---------- Python Setup + Cache ----------
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # ---------- Import & Config Test ----------
      - name: Import api.main with env safety
        run: |
          python - <<'PY'
          import importlib
          import os
          # Mock required env vars
          os.environ.setdefault("JWT_SECRET", "test-secret")
          try:
              importlib.import_module("api.main")
              print("‚úÖ api.main imported successfully")
          except Exception as e:
              print(f"‚ùå Import failed: {e}")
              raise
          PY

      # ---------- Linting (Strict) ----------
      - name: Lint with ruff (modern, fast)
        run: |
          pip install ruff
          ruff check . --exit-zero > ruff-output.txt || true
          # Fail if any errors
          if grep -q "error" ruff-output.txt; then
            echo "‚ùå Lint errors found:"
            cat ruff-output.txt
            exit 1
          fi
          echo "‚úÖ No lint errors"

      # ---------- Runtime Smoke Test ----------
      - name: Start Uvicorn and probe endpoints
        env:
          PORT: 8000
          JWT_SECRET: ci-test-secret
        run: |
          # Start app in background
          uvicorn api.main:app --host 0.0.0.0 --port $PORT &
          PID=$!

          # Wait for server to respond
          timeout 30s bash -c 'until curl -fs http://127.0.0.1:$PORT/; do sleep 1; done' || (echo "‚ùå App failed to start" && kill $PID && exit 1)
          echo "‚úÖ Root endpoint reachable"

          # Test /docs
          curl -fs http://127.0.0.1:$PORT/docs > /dev/null
          echo "‚úÖ /docs reachable"

          # Test health check
          curl -fs http://127.0.0.1:$PORT/healthz | grep -q "status.*ok" && echo "‚úÖ Health check OK" || (echo "‚ùå Health check failed" && kill $PID && exit 1)

          # Clean shutdown
          kill $PID && wait $PID 2>/dev/null || echo "‚úÖ Server stopped"

      # ---------- Docker Build + Scan ----------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t recoveryos:test -f Dockerfile .
          echo "‚úÖ Docker image built"

      - name: Scan Docker image for vulnerabilities
        run: |
          # Install Trivy (lightweight scanner)
          wget https://github.com/aquasecurity/trivy/releases/download/v0.56.0/trivy_0.56.0_Linux-64bit.tar.gz
          tar -xzf trivy_0.56.0_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/
          
          # Scan
          trivy image --exit-code 1 --severity CRITICAL recoveryos:test || (echo "‚ö†Ô∏è Critical vulnerabilities found ‚Äî review before deploy" && exit 1)
          echo "‚úÖ No critical vulnerabilities found"

      # ---------- Final Status ----------
      - name: Final Status
        run: |
          echo "üöÄ RecoveryOS Preflight Complete ‚Äî Ready for Secure, Scalable Care"
