name: Supply Chain Security

on:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: read
  actions: read

jobs:
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      image-tag: ${{ steps.meta.outputs.image-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dependency spec guard (requirements.txt only)
        run: |
          if [ -f requirements.in ]; then
            echo "requirements.in found but policy requires a single spec: requirements.txt only"
            exit 1
          fi
          if [ ! -f requirements.txt ]; then
            echo "requirements.txt is required and must be committed"
            exit 1
          fi

      - name: Lockfile guard (must exist and be fresh)
        run: |
          python -m pip install -U pip pip-tools
          if ! git ls-files --error-unmatch requirements.lock.txt >/dev/null 2>&1; then
            echo "requirements.lock.txt must be committed"
            exit 1
          fi
          if [ ! -s requirements.lock.txt ]; then
            echo "requirements.lock.txt is empty"
            exit 1
          fi
          TMP_LOCK="$(mktemp)"
          pip-compile --quiet --generate-hashes -o - requirements.txt > "$TMP_LOCK"
          if ! diff -u requirements.lock.txt "$TMP_LOCK" >/dev/null 2>&1; then
            echo "requirements.lock.txt is stale relative to requirements.txt"
            exit 1
          fi

      - name: Compute image tag
        id: meta
        run: |
          echo "image-tag=recoveryos:sbom-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Build image
        run: docker build -t ${{ steps.meta.outputs.image-tag }} -f Dockerfile .

  sbom-and-slsa:
    runs-on: ubuntu-latest
    needs: build-image
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate SBOM for source (CycloneDX)
        uses: anchore/sbom-action@v0.17.6
        with:
          path: .
          format: cyclonedx-json
          output-file: sbom-source.cdx.json

      - name: Generate SBOM for image (CycloneDX)
        uses: anchore/sbom-action@v0.17.6
        with:
          image: ${{ needs.build-image.outputs.image-tag }}
          format: cyclonedx-json
          output-file: sbom-image.cdx.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sboms
          path: |
            sbom-source.cdx.json
            sbom-image.cdx.json

      - name: Generate SLSA provenance (generic)
        id: slsa
        uses: slsa-framework/slsa-github-generator/.github/actions/generator@v1.9.0

      - name: Upload SLSA provenance
        uses: actions/upload-artifact@v4
        with:
          name: slsa-provenance
          path: |
            ${{ steps.slsa.outputs.provenance }}

  verify-slsa-on-main:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: sbom-and-slsa
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download SLSA provenance
        uses: actions/download-artifact@v4
        with:
          name: slsa-provenance
          path: provenance

      - name: Set up Go (for slsa-verifier)
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Install slsa-verifier
        run: |
          go install github.com/slsa-framework/slsa-verifier/v2@v2.4.0
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Verify SLSA provenance
        run: |
          test -n "$(ls -A provenance)" || { echo "No provenance files found"; exit 1; }
          set -e
          rc=0
          for f in provenance/*; do
            echo "Verifying $f"
            slsa-verifier verify-attestation \
              --provenance "$f" \
              --source-uri "github.com/greta-47/recoveryos" \
              --print-provenance || rc=1
          done
          if [ "$rc" -ne 0 ]; then
            echo "SLSA verification failed"
            exit 1
          fi
