name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'devin/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Unit & E2E Tests
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      PYTHONUNBUFFERED: "1"
      APP_HOST: "127.0.0.1"
      APP_PORT: "8000"
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx || true
          pip install "uvicorn[standard]" fastapi
          
      - name: Show env + versions (debug)
        run: |
          python -V
          which uvicorn || true
          pip freeze | sed -n '1,120p'
          
      - name: Start API server (background)
        run: |
          nohup python -m uvicorn main:app --host "$APP_HOST" --port "$APP_PORT" --no-access-log --log-level info > uvicorn.out 2>&1 &
          echo $! > uvicorn.pid
          sleep 1
          ps aux | grep "[u]vicorn" || true
          
      - name: Wait for /healthz
        run: |
          for i in $(seq 1 60); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "http://${APP_HOST}:${APP_PORT}/healthz" || true)
            if [ "$code" = "200" ]; then
              echo "Server is up."
              exit 0
            fi
            echo "Waiting for server... ($i/60)"
            sleep 1
          done
          echo "Server did not become healthy in time"
          echo "==== Uvicorn logs ===="
          sed -n '1,200p' uvicorn.out || true
          exit 1
          
      - name: Run linters
        run: |
          black --check .
          
      - name: Run tests
        run: |
          pytest test_elite_endpoints.py -v
          
      - name: Run E2E tests
        run: |
          python -m pytest test_api.py -v --tb=short || true
          
      - name: Always dump server logs on failure
        if: failure()
        run: |
          echo "==== Uvicorn logs (tail) ===="
          tail -n 200 uvicorn.out || true
          echo "==== Port usage ===="
          ss -ltnp || true
          echo "==== Processes ===="
          ps aux | grep "[u]vicorn" || true
          
      - name: Stop server
        if: always()
        run: |
          if [ -f uvicorn.pid ]; then kill -9 $(cat uvicorn.pid) || true; fi

  security:
    name: Security Scans
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security tools
        run: |
          pip install pip-audit safety bandit
          
      - name: Dependency vulnerability scan
        run: |
          pip-audit --desc --format=json --output=pip-audit-report.json
          safety check --json || true
          
      - name: Code security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Secret scan with gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
          
      - name: Fail on HIGH vulnerabilities
        run: |
          python -c "
          import json
          with open('pip-audit-report.json') as f:
              audit = json.load(f)
          high_vulns = [v for v in audit.get('vulnerabilities', []) if v.get('severity') == 'HIGH']
          if high_vulns:
              print(f'Found {len(high_vulns)} HIGH vulnerabilities')
              for vuln in high_vulns:
                  print(f'- {vuln.get(\"id\", \"Unknown\")}: {vuln.get(\"description\", \"No description\")}')
              exit(1)
          print('No HIGH severity vulnerabilities found')
          "

  lint:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install linting tools
        run: |
          pip install black ruff mypy
          pip install -r requirements.txt
          
      - name: Run black formatter check
        run: black --check --diff .
        
      - name: Run ruff linter
        run: ruff check .
        
      - name: Run type checking
        run: mypy . --ignore-missing-imports --explicit-package-bases

  build:
    name: Build & Container Scan
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t recoveryos:${{ github.sha }} .
          
      - name: Container vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'recoveryos:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif-results
          path: trivy-results.sarif
          retention-days: 30
          
      - name: Check for critical vulnerabilities
        run: |
          if [ -f trivy-results.sarif ]; then
            # Check if SARIF contains any HIGH or CRITICAL severity findings
            if grep -q '"level": "error"' trivy-results.sarif; then
              echo "❌ Critical or High severity vulnerabilities found in container scan"
              echo "Review the uploaded SARIF artifact for details"
              exit 1
            fi
            echo "✅ No critical vulnerabilities found in container scan"
          fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
