name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'devin/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  test:
    name: Unit & E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx
          
      - name: Start FastAPI server for tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key-for-ci' }}
        run: |
          uvicorn main:app --host 0.0.0.0 --port 8001 &
          sleep 5
          
      - name: Run unit tests with coverage
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key-for-ci' }}
        run: |
          pytest test_elite_endpoints.py -v --cov=main --cov=observability_enhanced --cov=feature_flags --cov-report=xml --cov-report=html --cov-fail-under=80
          
      - name: Run E2E tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python -m pytest test_api.py -v --tb=short
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  security:
    name: Security Scans
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security tools
        run: |
          pip install pip-audit safety bandit
          
      - name: Dependency vulnerability scan
        run: |
          pip-audit --desc --format=json --output=pip-audit-report.json
          safety check --json || true
          
      - name: Code security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Secret scan with gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
          
      - name: Fail on HIGH vulnerabilities
        run: |
          python -c "
          import json
          with open('pip-audit-report.json') as f:
              audit = json.load(f)
          high_vulns = [v for v in audit.get('vulnerabilities', []) if v.get('severity') == 'HIGH']
          if high_vulns:
              print(f'Found {len(high_vulns)} HIGH vulnerabilities')
              for vuln in high_vulns:
                  print(f'- {vuln.get(\"id\", \"Unknown\")}: {vuln.get(\"description\", \"No description\")}')
              exit(1)
          print('No HIGH severity vulnerabilities found')
          "

  lint:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install linting tools
        run: |
          pip install black ruff mypy
          
      - name: Run black formatter check
        run: black --check --diff .
        
      - name: Run ruff linter
        run: ruff check .
        
      - name: Run type checking
        run: mypy . --ignore-missing-imports --explicit-package-bases

  build:
    name: Build & Container Scan
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t recoveryos:${{ github.sha }} .
          
      - name: Container vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'recoveryos:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
