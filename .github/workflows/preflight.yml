name: RecoveryOS Preflight

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'

permissions:
  contents: read
  pull-requests: read

jobs:
  preflight:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install tooling
        run: |
          python -m pip install -U pip pip-tools
          pip install ruff==0.4.8 black==24.4.2

      - name: Dependency spec guard (requirements.in required)
        run: |
          if [ ! -f requirements.in ]; then
            echo "requirements.in is required and must be committed"
            exit 1
          fi

      - name: Lockfile guard (must exist and be fresh)
        run: |
          if ! git ls-files --error-unmatch requirements.lock.txt >/dev/null 2>&1; then
            echo "requirements.lock.txt must be committed"
            exit 1
          fi
          if [ ! -s requirements.lock.txt ]; then
            echo "requirements.lock.txt is empty"
            exit 1
          fi
          TMP_LOCK="$(mktemp)"
          pip-compile --quiet --generate-hashes -o "$TMP_LOCK" \
            requirements.base.in || pip-compile --quiet --generate-hashes -o "$TMP_LOCK" requirements.txt
          if ! diff -u <(grep -v '^#' requirements.lock.txt) <(grep -v '^#' "$TMP_LOCK") >/dev/null 2>&1; then
            echo "requirements.lock.txt is stale relative to source requirements"
            echo "Run: pip-compile --generate-hashes -o requirements.lock.txt requirements.txt"
            exit 1
          fi

      - name: Lint (ruff)
        run: ruff check .

      - name: Format check (black)
        run: black --check .

      - name: Lint and syntax check
        run: |
          python -m py_compile $(find . -name "*.py")

      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Prune Docker
        run: |
          docker system prune -af || true
          docker builder prune -af || true

      - name: Build Docker image (deterministic with lockfile)
        run: docker build -t recoveryos:ci-smoke -f Dockerfile .

      - name: Trivy scan (fs)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-results.sarif
          scanners: vuln
        continue-on-error: true

      - name: Check SARIF exists
        id: sarif
        run: |
          if [ -f trivy-results.sarif ]; then echo "exists=true" >> "$GITHUB_OUTPUT"; fi

      - name: Upload Trivy SARIF
        if: ${{ steps.sarif.outputs.exists == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Enforce HIGH+ failure on main
        if: github.ref == 'refs/heads/main' && steps.trivy.outcome != 'success'
        run: |
          echo "Trivy reported CRITICAL/HIGH issues on main"
          exit 1

      - name: Confirm app starts
        run: |
          if [ -f main.py ]; then
            timeout 30 python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
            sleep 5
            curl -f http://localhost:8000/healthz || (echo "Health check failed" && exit 1)
            pkill -f uvicorn
          fi
