name: RecoveryOS Preflight

on:
  push:
    branches:
      - "**"
    paths-ignore:
      - "README.md"
      - "docs/**"
  pull_request:
    branches:
      - "**"
    paths-ignore:
      - "README.md"
      - "docs/**"
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read
  security-events: write

jobs:
  preflight:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install tooling
        run: |
          python -m pip install -U pip pip-tools
          pip install ruff==0.5.6 black==24.4.2

      - name: Dependency spec guard (requirements.txt only)
        run: |
          if [ -f requirements.in ]; then
            echo "requirements.in found but policy requires a single spec: requirements.txt only"
            exit 1
          fi
          if [ ! -f requirements.txt ]; then
            echo "requirements.txt is required and must be committed"
            exit 1
          fi

      - name: Lockfile guard (must exist and be fresh)
        run: |
          if ! git ls-files --error-unmatch requirements.lock.txt >/dev/null 2>&1; then
            echo "requirements.lock.txt must be committed"
            exit 1
          fi
          if [ ! -s requirements.lock.txt ]; then
            echo "requirements.lock.txt is empty"
            exit 1
          fi
          TMP_LOCK="$(mktemp)"
          pip-compile --quiet --generate-hashes -o "$TMP_LOCK" requirements.txt
          if ! diff -u requirements.lock.txt "$TMP_LOCK" >/dev/null 2>&1; then
            echo "requirements.lock.txt is stale relative to requirements.txt"
            exit 1
          fi

      - name: Lint (ruff)
        run: ruff check .

      - name: Format check (black)
        run: black --check .

      - name: Lint and syntax check
        run: |
          python -m py_compile $(git ls-files '*.py' || echo '')

      - name: Trivy scan (filesystem, non-blocking)
        id: trivy-fs
        uses: aquasecurity/trivy-action@0.33.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-results.sarif
          scanners: vuln
        continue-on-error: true

      - name: Check SARIF exists
        id: sarif
        run: |
          if [ -f trivy-results.sarif ]; then echo "exists=true" >> "$GITHUB_OUTPUT"; fi

      - name: Upload Trivy SARIF
        if: ${{ steps.sarif.outputs.exists == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Confirm app starts (optional)
        run: |
          if [ -f main.py ]; then
            timeout 30 python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
            sleep 5
            curl -f http://localhost:8000/healthz || (echo "Health check failed" && exit 1)
            pkill -f "uvicorn"
          fi
