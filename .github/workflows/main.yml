name: Main CI & Publish (GHCR)

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

concurrency:
  group: build-publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  preflight-lock:
    name: Preflight · lockfile freshness (blocking)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip-tools (Linux)
        run: |
          python -m pip install -U pip 'pip-tools==7.4.1'

      - name: Regenerate lockfile (temp) on Linux
        run: |
          pip-compile --quiet --generate-hashes -o /tmp/requirements.lock.txt requirements.txt

      - name: Diff lockfile (ignore comments)
        run: |
          awk '!/^\s*#/' requirements.lock.txt > /tmp/current.txt
          awk '!/^\s*#/' /tmp/requirements.lock.txt > /tmp/new.txt
          set -e
          if ! diff -u /tmp/current.txt /tmp/new.txt > /tmp/lock.diff; then
            echo "::error file=requirements.lock.txt::Lockfile is stale relative to requirements.txt"
            cat /tmp/lock.diff || true
            exit 1
          fi

  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: preflight-lock
    env:
      PYTHONDONTWRITEBYTECODE: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install app deps (locked)
        run: |
          python -m pip install -U pip
          python -m pip install --require-hashes -r requirements.lock.txt
          python -m pip install -U ruff

      - name: ruff format --check
        run: ruff format --check .

      - name: ruff check
        run: ruff check .

      - name: Make scripts executable
        run: chmod +x scripts/*.sh || true

      - name: Unit tests (if present)
        run: |
          if [ -d tests ]; then
            python -m pip install -U pytest
            pytest -q
          else
            echo "No tests/ directory; skipping."
          fi

      - name: Smoke health check (/healthz)
        run: bash scripts/smoke.sh

  docker-publish:
    name: Docker Build & Push → GHCR
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image name (lowercase)
        run: echo "IMAGE=$(echo ghcr.io/${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:main
            ${{ env.IMAGE }}:sha-${{ github.sha }}

  security:
    name: Security Scans (blocking on main)
    runs-on: ubuntu-latest
    needs: docker-publish
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image name (lowercase)
        run: echo "IMAGE=$(echo ghcr.io/${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Run gitleaks (blocking)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-banner --redact --verbose

      - name: Trivy Image → SARIF (non-blocking step)
        continue-on-error: true
        run: |
          docker run --rm \
            -v "$PWD":/work \
            aquasec/trivy image --security-checks vuln \
            --format sarif --output trivy-image.sarif \
            --severity HIGH,CRITICAL ${{ env.IMAGE }}:sha-${{ github.sha }} || true

      - name: Upload SARIF (if present)
        if: ${{ always() && hashFiles('trivy-image.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      - name: Trivy Image (blocking)
        run: |
          docker run --rm aquasec/trivy image --security-checks vuln \
            --exit-code 1 --severity HIGH,CRITICAL \
            ${{ env.IMAGE }}:sha-${{ github.sha }}
